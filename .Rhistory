geom_bar(position = "fill", color = "black") +
scale_fill_manual(values = c("white", "orange")) +
ylab("Percent Performed") +
theme_bw(legend.title = element_blank())
ggplot(plotdata, aes(x = Behaviour, fill = factor(Y_N))) +
geom_bar(position = "fill", color = "black") +
scale_fill_manual(values = c("white", "orange")) +
ylab("Percent Performed") +
theme_bw() +
theme(legend.title = element_blank())
View(plotdata_w)
plotdata_w[nrow(plotdata_w) + 1,] <- list("C23-56-21", "White", "Nest", "Y")
plotdata_w[nrow(plotdata_w) + 1,] <- list("C23-14-58", "White", "Nest", "N")
plotdata_w[nrow(plotdata_w) + 1,] <- list("C23-61-18", "White", "Nest", "Y")
plotdata_w[nrow(plotdata_w) + 1,] <- list("C23-3-26", "White", "Nest", "Y")
plotdata_w[nrow(plotdata_w) + 1,] <- list("C23-16-6", "White", "Nest", "Y")
plotdata_w[nrow(plotdata_w) + 1,] <- list("C23-13-52", "White", "Nest", "Y")
plotdata_w[nrow(plotdata_w) + 1,] <- list("C23-12-64", "White", "Nest", "Y")
plotdata_w[nrow(plotdata_w) + 1,] <- list("C23-1-68", "White", "Nest", "Y")
View(plotdata_w)
write.csv(plotdata_w, "C:/Users/steph/OneDrive/Desktop/Adi_whites.csv", row.names=FALSE)
plotdata_w$Behaviour <- factor(plotdata_w$Behaviour, levels = c("Nest", "Fertilize", "Disperse"))
ggplot(plotdata, aes(x = Behaviour, fill = factor(Y_N))) +
geom_bar(position = "fill", color = "black") +
scale_fill_manual(values = c("white", "orange")) +
ylab("Percent Performed") +
theme_bw(base_size = 20) +
theme(legend.title = element_blank())
ggplot(plotdata_w, aes(x = Behaviour, fill = factor(Y_N))) +
geom_bar(position = "fill", color = "black") +
scale_fill_manual(values = c("white", "darkgrey")) +
ylab("Percent Performed") +
theme_bw(base_size = 20) +
theme(legend.title = element_blank())
View(Adi_commons)
Anova(fan_t_c2, type = 3, test.statistic = "F")
ggplot(Courtship_injected_c, aes(x = Treatment, y = Fanning_t_adj, fill = Injected_interest)) +
geom_boxplot(outlier.shape = NA) +
scale_fill_manual(values = c("grey", "orange1", "orangered3")) +
geom_point(position=position_jitterdodge(dodge.width = 0.8, jitter.width = 0.1, jitter.height = 0), shape=16, size =2) +
theme_bw()
ggplot(Courtship_injected_w, aes(x = Treatment, y = Fanning_t_adj, fill = Injected_interest)) +
geom_boxplot(outlier.shape = NA) +
geom_point(position=position_jitterdodge(dodge.width = 0.8, jitter.width = 0.1, jitter.height = 0), shape=16, size =2) +
scale_fill_manual(values = c("grey", "dodgerblue", "dodgerblue3")) +
theme_bw()
Anova(fan_t_w2, type = 3, test.statistic = "F") #interaction term is NOT significant, remove
ggplot(Courtship_injected_y, aes(x = Treatment, fill = factor(Parented_or_dispersed))) +
geom_bar(position = "fill") +
facet_grid(. ~ Population)
fert_c
interest_c
interest_w
42*3
42/9
save.image(file="C:/Users/steph/OneDrive/Desktop/Data/IST Courtship Su24/myEnvironment.RData")
load("C:/Users/steph/OneDrive/Desktop/Data/IST Courtship Su24/myEnvironment.RData")
View(bites_c)
View(Courtship)
sessionInfo()
library(Seurat)
library(data.table) #fread comes from data.table
library(readxl)
library(ggplot2)
library(dplyr)
library(magrittr)
library(ggpubr)
library(lme4)
library(Hmisc) #for p-values for correlation matrices
library(corrplot)
library(car) #Anova()
counts = list(rep(NA), 3)
for (i in 1:3) {
counts[[i]] = Read10X(paste0("C:/Users/steph/OneDrive/Desktop/Data/snRNAseq/BARCODE_ASSIGNMENTS/CellRanger/Pool", i, "/"))
}
for (i in 1:3) {
counts[[i]] = CreateSeuratObject(counts = counts[[i]],
project = paste0("Pool", i))
}
merged = merge(counts[[1]], y = c(counts[[2]], counts[[3]]))
mappings = list(rep(NA), 3)
for (i in 1:3) {
file = list.files(paste0("C:/Users/steph/OneDrive/Desktop/Data/snRNAseq/BARCODE_ASSIGNMENTS/Demuxlet/Pool", i, "/"),
pattern = "Filtered_.*\\.best",
full.names = TRUE)
mappings[[i]] = fread(file)
## keep singlets, get fish id, add pool to barcode name
mappings[[i]] = mappings[[i]][DROPLET.TYPE == "SNG",]
f = function(x) {
sapply(x, function(xx) strsplit(xx, ",")[[1]][1])
}
mappings[[i]][, fish_id := f(BEST.GUESS)]
mappings[[i]][, BARCODE := paste0(BARCODE, "_", i)]
}
mappings = Reduce(rbind, mappings)
setkey(mappings, "BARCODE")
## add fish ids
merged@meta.data$fish_id = mappings[rownames(merged@meta.data), fish_id]
## remove cells without fish id
merged = merged[, !is.na(merged@meta.data$fish_id)]
fish_info = data.table(readxl::read_excel("C:/Users/steph/OneDrive/Desktop/Data/snRNAseq/Single Cell Brain Info.xlsx"))
# replace "-" with "_" in IDs
fish_info[, ID := gsub("-", "_", ID)]
setkey(fish_info, "ID")
merged@meta.data = cbind(merged@meta.data,
fish_info[merged@meta.data$fish_id, 2:6, with = FALSE])
merged[["percent.mt"]] = PercentageFeatureSet(merged, pattern = "^mt-")
VlnPlot(merged, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
#Pool 2 has clump of high percent MT cells, pool 3 has lower percent MT cells than other pools
#Pool 3 has fewer cells with low number of genes compared to other two pools
#otherwise QC metrics look similar, will use similar cutoffs
#merged = subset(merged, subset = nCount_RNA <= 9e4 & percent.mt < 5) #original QC from Dave
#added QC by UD vis-a-vis Johnson
#dead/dying cells
merged = subset(merged, subset = nFeature_RNA >= 300 & nCount_RNA >= 500 & percent.mt <= 5)
#doublets/multiplets
merged = subset(merged, subset = nFeature_RNA <= 3500 & nCount_RNA <= 8000)
rm(counts)
merged = NormalizeData(merged)
merged = FindVariableFeatures(merged,
selection.method = "vst",
nfeatures = 2000)
hvg <- VariableFeatures(merged)
####do a correlation analysis with the canonical IEGs (c-fos, egr-1, naps4) and hvgs####
canon_ieg <- c("fosab", "egr1", "npas4a")
hvg_no_canonieg <- hvg[! hvg %in% canon_ieg]
####are the canonical IEGs highly correlated with one another?####
#with expression levels
canonieg_mat <- FetchData(merged, vars = canon_ieg)
canonieg_cor <- cor(canonieg_mat, method = "spearman")
corrplot(canonieg_cor, addCoef.col = "black")
#with counts
#canonieg_mat_c <- FetchData(merged, vars = canon_ieg, slot = "counts")
#canonieg_cor_c <- cor(canonieg_mat_c, method = "spearman")
#p-values
canonieg_corr_p <- rcorr(as.matrix(canonieg_mat), type = "spearman")
canonieg_corr_p
#print(canonieg_corr_p$P, digits = 5)
#the canonical IEGs are not necessarily highly correlated with one another, but are significantly correlated.
####do a correlation analysis for each canonical IEG and the hvgs####
hvg_no_canonieg_mat <- FetchData(merged, vars = hvg_no_canonieg)
##fosab
fosab <- as.numeric(canonieg_mat$fosab)
fosab_corr <- vector("list", 1997)
for(i in 1:1997){
fosab_corr[[i]] <- cor.test(fosab, hvg_no_canonieg_mat[ , i], method = "spearman")
}
#summarize results
fosab_results <- as.data.frame(matrix(nrow=1997, ncol=4))
colnames(fosab_results) <- c("gene", "rho", "S", "p_value")
for(i in 1:1997){
fosab_results[i, "gene"] <- colnames(hvg_no_canonieg_mat)[i]
fosab_results[i, "rho"] <- fosab_corr[[i]]$estimate
fosab_results[i, "S"] <- fosab_corr[[i]]$statistic
fosab_results[i, "p_value"] <- fosab_corr[[i]]$p.value
}
#Bonferroni-corrected p
fosab_results$p_adj <- fosab_results$p_value * 1997
fosab_results[fosab_results$p_adj <= 0.05 & fosab_results$rho > 0, ]
##egr1
egr1 <- as.numeric(canonieg_mat$egr1)
egr1_corr <- vector("list", 1997)
for(i in 1:1997){
egr1_corr[[i]] <- cor.test(egr1, hvg_no_canonieg_mat[ , i], method = "spearman")
}
#summarize results
egr1_results <- as.data.frame(matrix(nrow=1997, ncol=4))
colnames(egr1_results) <- c("gene", "rho", "S", "p_value")
for(i in 1:1997){
egr1_results[i, "gene"] <- colnames(hvg_no_canonieg_mat)[i]
egr1_results[i, "rho"] <- egr1_corr[[i]]$estimate
egr1_results[i, "S"] <- egr1_corr[[i]]$statistic
egr1_results[i, "p_value"] <- egr1_corr[[i]]$p.value
}
#Bonferroni-corrected p
egr1_results$p_adj <- egr1_results$p_value * 1997
egr1_results[egr1_results$p_adj <= 0.05 & egr1_results$rho > 0, ]
##npas4a
npas4a <- as.numeric(canonieg_mat$npas4a)
npas4a_corr <- vector("list", 1997)
for(i in 1:1997){
npas4a_corr[[i]] <- cor.test(npas4a, hvg_no_canonieg_mat[ , i], method = "spearman")
}
#summarize results
npas4a_results <- as.data.frame(matrix(nrow=1997, ncol=4))
colnames(npas4a_results) <- c("gene", "rho", "S", "p_value")
for(i in 1:1997){
npas4a_results[i, "gene"] <- colnames(hvg_no_canonieg_mat)[i]
npas4a_results[i, "rho"] <- npas4a_corr[[i]]$estimate
npas4a_results[i, "S"] <- npas4a_corr[[i]]$statistic
npas4a_results[i, "p_value"] <- npas4a_corr[[i]]$p.value
}
#Bonferroni-corrected p
npas4a_results$p_adj <- npas4a_results$p_value * 1997
npas4a_results[npas4a_results$p_adj <= 0.05 & npas4a_results$rho > 0, ]
##genes on all three correlation lists, at least 0.1 correlation coefficient
fosab_genes <- fosab_results[fosab_results$p_adj <= 0.05 & fosab_results$rho >= 0.1, 1]
egr1_genes <- egr1_results[egr1_results$p_adj <= 0.05 & egr1_results$rho >= 0.1, 1]
npas4a_genes <- npas4a_results[npas4a_results$p_adj <= 0.05 & npas4a_results$rho >= 0.1, 1]
IEG_like_maybe <- intersect(fosab_genes, egr1_genes)
IEG_like_maybe <- intersect(IEG_like_maybe, npas4a_genes)
#plot of the genes
IEG_like_maybe_mat <- FetchData(merged, vars = IEG_like_maybe)
ieg_cor <- cor(IEG_like_maybe_mat, canonieg_mat, method = "spearman")
corrplot(ieg_cor, addCoef.col = "black")
#does my list of IEGs overlap with Johnson et al's?
ieg_johnson <- c("fos",
"egr1",
"npas4",
"jun",
"jund",
"nr4a1",
"egr2",
"egr3",
"egr4",
"dusp5",
"gadd45ba",
"sgk1",
"plk2",
"fosl2",
"crem",
"dnajb5",
"adgrb1",
"gpr12",
"itm2c",
"irs2",
"rtn4rl2",
"rrad")
sapply(ieg_johnson, grep, IEG_like_maybe, value=TRUE)
sapply(ieg_johnson, grep, hvg, value = TRUE)
####make list of iegs in our dataset####
iegs <- c(canon_ieg, IEG_like_maybe)
####IEG corplot for poster####
IEG_mat <- FetchData(merged, vars = iegs)
#rearranging the matrix so the long genes names go at the end of the corrplot
longnames_mat <- IEG_mat[ , c("si:cabz01085950.1", "ENSGACG00000015211", "ENSGACG00000017610")]
longnames <- c("si:cabz01085950.1", "ENSGACG00000015211", "ENSGACG00000017610")
IEG_mat_del <- IEG_mat[ , !(names(IEG_mat) %in% longnames)]
IEG_mat <- cbind(IEG_mat_del, longnames_mat)
ieg_cor_forplot <- cor(canonieg_mat, IEG_mat, method = "spearman")
corrplot(ieg_cor_forplot, method = "color", addCoef.col = "black", col.lim=c(0,1), tl.col = "black", cl.pos = "n", number.cex = 2, tl.cex = 2)
#png(height=1000, width=1800, file="C:/Users/steph/OneDrive/Desktop/Data/GRC 2023/Poster_Figs/iegcor.png", type = "cairo")
#corrplot(ieg_cor_forplot, method = "color", addCoef.col = "black", col.lim=c(0,1), tl.col = "black", cl.pos = "n", number.cex = 2.5, tl.cex = 2.5)
#dev.off()
#create list of highly variable genes with no iegs
hvg_noieg <- hvg[! hvg %in% iegs]
#scale
merged@meta.data$Pool = as.factor(merged@meta.data$Pool)
merged@meta.data$Batch = as.factor(merged@meta.data$Batch)
merged = ScaleData(merged, vars.to.regress = c("Pool", "Batch"))
#run PCA
merged = RunPCA(merged,
features = hvg_noieg,
verbose = FALSE)
#merged <- JackStraw(merged, dims = 50)
#merged <- ScoreJackStraw(merged, dims = 1:50)
#JackStrawPlot(merged, dims = 1:50)
ElbowPlot(merged, ndims = 50)
#keep all PCs
ndim = 50
merged = RunUMAP(merged, dims = 1:ndim)
#run by features or reduced dimensions?
merged = FindNeighbors(merged, dims = 1:ndim)
#coarse level clustering
#merged = FindClusters(merged, resolution = 0.12)
#merged@meta.data$primary_clusters <- merged@meta.data$seurat_clusters
#DimPlot(merged, reduction = "umap", group.by = "primary_clusters", label = T, label.size = 4)
#fine level clustering
#merged = FindClusters(merged, resolution = 2.5)
#merged@meta.data$secondary_clusters <- merged@meta.data$seurat_clusters
#DimPlot(merged, reduction = "umap", group.by = "secondary_clusters", label = T, label.size = 4)
#unique(merged@meta.data$secondary_clusters[merged@meta.data$primary_clusters == "15"])
#merged@meta.data$secondary_clusters <- as.character(merged@meta.data$secondary_clusters)
#merged@meta.data$secondary_clusters[merged@meta.data$seurat_clusters == "10"] <- "10"
#merged@meta.data$secondary_clusters[merged@meta.data$seurat_clusters == "15"] <- "15"
#merged@meta.data$secondary_clusters <- as.factor(merged@meta.data$secondary_clusters)
#primary clusters
merged = FindClusters(merged, resolution = 0.4)
clusterplot <- DimPlot(merged, reduction = "umap", group.by = "seurat_clusters", label = T, label.size = 10) +
theme(legend.position="none",
plot.title = element_blank(),
strip.text.x = element_blank(),
axis.line=element_line(size=2),
axis.text=element_text(size=20),
axis.title=element_text(size=25))
#ggsave(clusterplot, file="Poster_Figs/clusterplot.png", width = 25, height = 20, units = "cm")
#saveRDS(merged, file = "C:/Users/steph/OneDrive/Desktop/Data/snRNAseq/tel_merged_25clusters.rds")
#playing with clustering
#merged = FindClusters(merged, resolution = 1)
#DimPlot(merged, reduction = "umap", group.by = "seurat_clusters", label = T, label.size = 10) +
#theme(legend.position="none",
#     plot.title = element_blank(),
#    strip.text.x = element_blank(),
#   axis.line=element_line(size=2),
#  axis.text=element_text(size=20),
# axis.title=element_text(size=25))
clusterplot
DimPlot(merged, reduction = "umap", group.by = "seurat_clusters", label = T, label.size = 10) +
theme(legend.position="none",
plot.title = element_blank(),
strip.text.x = element_blank(),
axis.line=element_line(size=2),
axis.text=element_text(size=20),
axis.title=element_text(size=25))
library(Seurat)
library(data.table) #fread comes from data.table
library(readxl)
library(ggplot2)
library(dplyr)
library(magrittr)
library(ggpubr)
library(lme4)
library(Hmisc) #for p-values for correlation matrices
library(corrplot)
library(car) #Anova()
counts = list(rep(NA), 3)
for (i in 1:3) {
counts[[i]] = Read10X(paste0("C:/Users/steph/OneDrive/Desktop/Data/snRNAseq/BARCODE_ASSIGNMENTS/CellRanger/Pool", i, "/"))
}
for (i in 1:3) {
counts[[i]] = CreateSeuratObject(counts = counts[[i]],
project = paste0("Pool", i))
}
tel = merge(counts[[1]], y = c(counts[[2]], counts[[3]]))
tel[["RNA"]] = JoinLayers(tel[["RNA"]])
mappings = list(rep(NA), 3)
for (i in 1:3) {
file = list.files(paste0("C:/Users/steph/OneDrive/Desktop/Data/snRNAseq/BARCODE_ASSIGNMENTS/Demuxlet/Pool", i, "/"),
pattern = "Filtered_.*\\.best",
full.names = TRUE)
mappings[[i]] = fread(file)
## keep singlets, get fish id, add pool to barcode name
mappings[[i]] = mappings[[i]][DROPLET.TYPE == "SNG",]
f = function(x) {
sapply(x, function(xx) strsplit(xx, ",")[[1]][1])
}
mappings[[i]][, fish_id := f(BEST.GUESS)]
mappings[[i]][, BARCODE := paste0(BARCODE, "_", i)]
}
mappings = Reduce(rbind, mappings)
setkey(mappings, "BARCODE")
## add fish ids
tel@meta.data$fish_id = mappings[rownames(tel@meta.data), fish_id]
## remove cells without fish id
tel = tel[, !is.na(tel@meta.data$fish_id)]
fish_info = data.table(readxl::read_excel("C:/Users/steph/OneDrive/Desktop/Data/snRNAseq/Single Cell Brain Info.xlsx"))
# replace "-" with "_" in IDs
fish_info[, ID := gsub("-", "_", ID)]
setkey(fish_info, "ID")
tel@meta.data = cbind(tel@meta.data,
fish_info[tel@meta.data$fish_id, 2:6, with = FALSE])
tel[["percent.mt"]] = PercentageFeatureSet(tel, pattern = "^mt-")
VlnPlot(tel, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
#Pool 2 has clump of high percent MT cells, pool 3 has lower percent MT cells than other pools
#Pool 3 has fewer cells with low number of genes compared to other two pools
#otherwise QC metrics look similar, will use similar cutoffs
#merged = subset(merged, subset = nCount_RNA <= 9e4 & percent.mt < 5) #original QC from Dave
#added QC by UD vis-a-vis Johnson
#dead/dying cells
tel = subset(tel, subset = nFeature_RNA >= 300 & nCount_RNA >= 500 & percent.mt <= 5)
#doublets/multiplets
tel = subset(tel, subset = nFeature_RNA <= 3500 & nCount_RNA <= 8000)
rm(counts)
tel = NormalizeData(tel)
tel = FindVariableFeatures(tel,
selection.method = "vst",
nfeatures = 2000)
hvg <- VariableFeatures(tel)
####do a correlation analysis with the canonical IEGs (c-fos, egr-1, naps4) and hvgs####
canon_ieg <- c("fosab", "egr1", "npas4a")
hvg_no_canonieg <- hvg[! hvg %in% canon_ieg]
####are the canonical IEGs highly correlated with one another?####
#with expression levels
canonieg_mat <- FetchData(tel, vars = canon_ieg)
canonieg_cor <- cor(canonieg_mat, method = "spearman")
corrplot(canonieg_cor, addCoef.col = "black")
#with counts
#canonieg_mat_c <- FetchData(merged, vars = canon_ieg, slot = "counts")
#canonieg_cor_c <- cor(canonieg_mat_c, method = "spearman")
#p-values
canonieg_corr_p <- rcorr(as.matrix(canonieg_mat), type = "spearman")
canonieg_corr_p
#print(canonieg_corr_p$P, digits = 5)
#the canonical IEGs are not necessarily highly correlated with one another, but are significantly correlated.
####do a correlation analysis for each canonical IEG and the hvgs####
hvg_no_canonieg_mat <- FetchData(tel, vars = hvg_no_canonieg)
##fosab
fosab <- as.numeric(canonieg_mat$fosab)
fosab_corr <- vector("list", 1997)
for(i in 1:1997){
fosab_corr[[i]] <- cor.test(fosab, hvg_no_canonieg_mat[ , i], method = "spearman")
}
#summarize results
fosab_results <- as.data.frame(matrix(nrow=1997, ncol=4))
colnames(fosab_results) <- c("gene", "rho", "S", "p_value")
for(i in 1:1997){
fosab_results[i, "gene"] <- colnames(hvg_no_canonieg_mat)[i]
fosab_results[i, "rho"] <- fosab_corr[[i]]$estimate
fosab_results[i, "S"] <- fosab_corr[[i]]$statistic
fosab_results[i, "p_value"] <- fosab_corr[[i]]$p.value
}
#Bonferroni-corrected p
fosab_results$p_adj <- fosab_results$p_value * 1997
fosab_results[fosab_results$p_adj <= 0.05 & fosab_results$rho > 0, ]
##egr1
egr1 <- as.numeric(canonieg_mat$egr1)
egr1_corr <- vector("list", 1997)
for(i in 1:1997){
egr1_corr[[i]] <- cor.test(egr1, hvg_no_canonieg_mat[ , i], method = "spearman")
}
#summarize results
egr1_results <- as.data.frame(matrix(nrow=1997, ncol=4))
colnames(egr1_results) <- c("gene", "rho", "S", "p_value")
for(i in 1:1997){
egr1_results[i, "gene"] <- colnames(hvg_no_canonieg_mat)[i]
egr1_results[i, "rho"] <- egr1_corr[[i]]$estimate
egr1_results[i, "S"] <- egr1_corr[[i]]$statistic
egr1_results[i, "p_value"] <- egr1_corr[[i]]$p.value
}
#Bonferroni-corrected p
egr1_results$p_adj <- egr1_results$p_value * 1997
egr1_results[egr1_results$p_adj <= 0.05 & egr1_results$rho > 0, ]
##npas4a
npas4a <- as.numeric(canonieg_mat$npas4a)
npas4a_corr <- vector("list", 1997)
for(i in 1:1997){
npas4a_corr[[i]] <- cor.test(npas4a, hvg_no_canonieg_mat[ , i], method = "spearman")
}
#summarize results
npas4a_results <- as.data.frame(matrix(nrow=1997, ncol=4))
colnames(npas4a_results) <- c("gene", "rho", "S", "p_value")
for(i in 1:1997){
npas4a_results[i, "gene"] <- colnames(hvg_no_canonieg_mat)[i]
npas4a_results[i, "rho"] <- npas4a_corr[[i]]$estimate
npas4a_results[i, "S"] <- npas4a_corr[[i]]$statistic
npas4a_results[i, "p_value"] <- npas4a_corr[[i]]$p.value
}
#Bonferroni-corrected p
npas4a_results$p_adj <- npas4a_results$p_value * 1997
npas4a_results[npas4a_results$p_adj <= 0.05 & npas4a_results$rho > 0, ]
##genes on all three correlation lists, at least 0.1 correlation coefficient
fosab_genes <- fosab_results[fosab_results$p_adj <= 0.05 & fosab_results$rho >= 0.1, 1]
egr1_genes <- egr1_results[egr1_results$p_adj <= 0.05 & egr1_results$rho >= 0.1, 1]
npas4a_genes <- npas4a_results[npas4a_results$p_adj <= 0.05 & npas4a_results$rho >= 0.1, 1]
IEG_like_maybe <- intersect(fosab_genes, egr1_genes)
IEG_like_maybe <- intersect(IEG_like_maybe, npas4a_genes)
#plot of the genes
IEG_like_maybe_mat <- FetchData(merged, vars = IEG_like_maybe)
#create list of highly variable genes with no iegs
hvg_noieg <- hvg[! hvg %in% iegs]
####make list of iegs in our dataset####
iegs <- c(canon_ieg, IEG_like_maybe)
#create list of highly variable genes with no iegs
hvg_noieg <- hvg[! hvg %in% iegs]
#scale
tel@meta.data$Pool = as.factor(tel@meta.data$Pool)
tel@meta.data$Batch = as.factor(tel@meta.data$Batch)
tel = ScaleData(tel, vars.to.regress = c("Pool", "Batch"))
#run PCA
tel = RunPCA(tel,
features = hvg_noieg,
verbose = FALSE)
#merged <- JackStraw(merged, dims = 50)
#merged <- ScoreJackStraw(merged, dims = 1:50)
#JackStrawPlot(merged, dims = 1:50)
ElbowPlot(tel, ndims = 50)
#keep all PCs
ndim = 50
tel = RunUMAP(tel, dims = 1:ndim)
#run by features or reduced dimensions?
tel = FindNeighbors(tel, dims = 1:ndim)
#coarse level clustering
#merged = FindClusters(merged, resolution = 0.12)
#merged@meta.data$primary_clusters <- merged@meta.data$seurat_clusters
#DimPlot(merged, reduction = "umap", group.by = "primary_clusters", label = T, label.size = 4)
#fine level clustering
#merged = FindClusters(merged, resolution = 2.5)
#merged@meta.data$secondary_clusters <- merged@meta.data$seurat_clusters
#DimPlot(merged, reduction = "umap", group.by = "secondary_clusters", label = T, label.size = 4)
#unique(merged@meta.data$secondary_clusters[merged@meta.data$primary_clusters == "15"])
#merged@meta.data$secondary_clusters <- as.character(merged@meta.data$secondary_clusters)
#merged@meta.data$secondary_clusters[merged@meta.data$seurat_clusters == "10"] <- "10"
#merged@meta.data$secondary_clusters[merged@meta.data$seurat_clusters == "15"] <- "15"
#merged@meta.data$secondary_clusters <- as.factor(merged@meta.data$secondary_clusters)
#primary clusters
tel = FindClusters(tel, resolution = 0.4)
clusterplot <- DimPlot(tel, reduction = "umap", group.by = "seurat_clusters", label = T, label.size = 10) +
theme(legend.position="none",
plot.title = element_blank(),
strip.text.x = element_blank(),
axis.line=element_line(size=2),
axis.text=element_text(size=20),
axis.title=element_text(size=25))
#ggsave(clusterplot, file="Poster_Figs/clusterplot.png", width = 25, height = 20, units = "cm")
#saveRDS(merged, file = "C:/Users/steph/OneDrive/Desktop/Data/snRNAseq/tel_merged_25clusters.rds")
#playing with clustering
#merged = FindClusters(merged, resolution = 1)
#DimPlot(merged, reduction = "umap", group.by = "seurat_clusters", label = T, label.size = 10) +
#theme(legend.position="none",
#     plot.title = element_blank(),
#    strip.text.x = element_blank(),
#   axis.line=element_line(size=2),
#  axis.text=element_text(size=20),
# axis.title=element_text(size=25))
#setwd just in case working directory was set to something else
setwd("C:/Users/steph/OneDrive/Desktop/Personal Ltd/personal_website/usandan.github.io")
#render site
rmarkdown::render_site()
#setwd just in case working directory was set to something else
setwd("C:/Users/steph/OneDrive/Desktop/Personal Ltd/personal_website/usandan.github.io")
#render site
rmarkdown::render_site()
